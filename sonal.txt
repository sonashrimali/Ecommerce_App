import React, { useEffect, useContext, useState } from "react";
import { View, Text, SafeAreaView } from "react-native";
import SplashScreen from "react-native-splash-screen";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { NavigationContainer } from "@react-navigation/native";
import HomeScreen from "./Src/screen/HomeScreen";
import ProductDetailsScreen from "./Src/screen/ProductDetailsScreen";
import Entypo from "react-native-vector-icons/Entypo";
import MaterialIcons from "react-native-vector-icons/MaterialIcons";
import MaterialCommunityIcons from "react-native-vector-icons/MaterialCommunityIcons";
import FontAwesome6 from "react-native-vector-icons/FontAwesome6";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import CartScreen from "./Src/screen/CartScreen";
import { CartProvider, CartContext } from "./Src/context/CartContext";
import ProfileScreen from "./Src/screen/ProfileScreen";
import ReorderScreen from "./Src/screen/ReorderScreen";
import { collection, getDocs, getFirestore } from "firebase/firestore";
import { db } from "./Src/firebaseConfig"; // Import Firebase Firestore instance

const Tab = createBottomTabNavigator();
const Stack = createNativeStackNavigator();

const MyHomeStack = () => {
  return (
    <Stack.Navigator screenOptions={{ headerShown: false }} initialRouteName="Home">
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Product_Details" component={ProductDetailsScreen} />
    </Stack.Navigator>
  );
};

const CartIcon = ({ size, color, cartCount }) => {
  return (
    <View style={{ position: "relative" }}>
      <MaterialCommunityIcons name={"cart"} size={size} color={color} />
      {cartCount > 0 && (
        <View
          style={{
            height: 16,
            width: 16,
            borderRadius: 8,
            backgroundColor: "red",
            justifyContent: "center",
            alignItems: "center",
            position: "absolute",
            top: -5,
            right: -5,
          }}
        >
          <Text style={{ fontSize: 10, color: "white", fontWeight: "bold" }}>
            {cartCount > 9 ? "9+" : cartCount}
          </Text>
        </View>
      )}
    </View>
  );
};

const App = () => {
  return (
    <CartProvider>
      <MainApp />
    </CartProvider>
  );
};

const MainApp = () => {
  const { carts } = useContext(CartContext);
  const [products, setProducts] = useState([]);

  useEffect(() => {
    SplashScreen.hide();
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    try {
      console.log("Firestore instance:", db); // Debugging Firestore
      const querySnapshot = await getDocs(collection(db, "products"));
      const productsList = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setProducts(productsList);
      console.log("Fetched Products:", productsList);
    } catch (error) {
      console.error("Error fetching products:", error);
    }
  };

  return (
    <SafeAreaView style={{ flex: 1 }}>
      <NavigationContainer>
        <Tab.Navigator
          screenOptions={{ headerShown: false, tabBarShowLabel: false, tabBarActiveTintColor: "#660066" }}
          initialRouteName="Home_Stack"
        >
          <Tab.Screen
            name="Home_Stack"
            component={MyHomeStack}
            options={{ tabBarIcon: ({ size, color }) => <Entypo name={"home"} size={size} color={color} /> }}
          />
          <Tab.Screen
            name="REORDER"
            component={ReorderScreen}
            options={{ tabBarIcon: ({ size, color }) => <MaterialIcons name={"reorder"} size={size} color={color} /> }}
          />
          <Tab.Screen
            name="Cart"
            component={CartScreen}
            options={{ tabBarIcon: ({ size, color }) => <CartIcon size={size} color={color} cartCount={carts.length} /> }}
          />
          <Tab.Screen
            name="Profile"
            component={ProfileScreen}
            options={{ tabBarIcon: ({ size, color }) => <FontAwesome6 name={"user"} size={size} color={color} /> }}
          />
        </Tab.Navigator>
      </NavigationContainer>
    </SafeAreaView>
  );
};

export default App;
